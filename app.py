import streamlit as st
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch
import mysql.connector

# Database connection
connection = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    port=4000,
    user="3bUwYvrRnEGpqae.root",
    password="ekS17vv8KwPWdZs0",
    database="guvidb"
)
mycursor = connection.cursor(buffered=True)

model_name_or_path = "./fine_tuned_model"  # Use the directory where you saved the model
model = GPT2LMHeadModel.from_pretrained(model_name_or_path)

token_name_or_path = "./fine_tuned_model"  # Use the directory where you saved the tokenizer
tokenizer = GPT2Tokenizer.from_pretrained(token_name_or_path)

# Move the model to GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Define the text generation function
def generate_text(seed_text, max_length=100, temperature=1.0, num_return_sequences=1):
    input_ids = tokenizer.encode(seed_text, return_tensors='pt').to(device)
    with torch.no_grad():
        output = model.generate(
            input_ids,
            max_length=max_length,
            temperature=temperature,
            num_return_sequences=num_return_sequences,
            do_sample=True,
            top_k=50,
            top_p=0.95,
        )
    generated_texts = [tokenizer.decode(output[i], skip_special_tokens=True) for i in range(num_return_sequences)]
    return generated_texts

def insert_credentials(username, password):
    try:
        mycursor.execute('SELECT * FROM guvidb.guvi_table WHERE Username = %s', (username,))
        if mycursor.fetchone():
            st.error("Username already exists. Please choose a different one.")
        else:
            mycursor.execute('INSERT INTO guvidb.guvi_table (Username, Password) VALUES (%s, %s)', (username, password))
            connection.commit()
    except mysql.connector.Error as err:
        st.error(f"Error inserting credentials: {err}")

def authenticate(username, password):
    mycursor.execute('SELECT * FROM guvidb.guvi_table WHERE Username = %s AND Password = %s', (username, password))
    user = mycursor.fetchone()
    return user is not None

def forgot_password(username, new_password):
    try:
        mycursor.execute('SELECT * FROM guvidb.guvi_table WHERE Username = %s', (username,))
        if mycursor.fetchone():
            mycursor.execute('UPDATE guvidb.guvi_table SET Password = %s WHERE Username = %s', (new_password, username))
            connection.commit()
            st.success("Password updated successfully!")
        else:
            st.error("Username not found.")
    except mysql.connector.Error as err:
        st.error(f"Error updating password: {err}")

# Initialize session state variables
if 'page' not in st.session_state:
    st.session_state.page = 'login'
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

scrolling_text = """
<h1 style='color:Indigo; font-weight: bold;'>
    <marquee behavior="scroll" direction="left" scrollamount="10">WELCOME TO GUVI GPT-TEXT GENERATOR</marquee>
</h1>
"""
st.markdown(scrolling_text, unsafe_allow_html=True)

# Login Page
if st.session_state.page == 'login':
    st.markdown("<h2 style='color: violet; text-align: center;'>Login</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='color: red;'>Username</h3>", unsafe_allow_html=True)
    username = st.text_input("Enter Your Username", key="login_username")

    st.markdown("<h3 style='color: red;'>Password</h3>", unsafe_allow_html=True)
    password = st.text_input("Enter Your Password", type="password", key="login_password")

    if st.button("Login"):
        if authenticate(username, password):
            st.session_state.authenticated = True
            st.success("Logged in successfully!")
        else:
            st.error("Incorrect login credentials")

    # If authenticated, show text generation
    if st.session_state.authenticated:
        st.markdown("<h2 style='color: red; text-align: center;'>Text Generation</h2>", unsafe_allow_html=True)
        st.info("Disclaimer: GUVIGPT can make mistakes. The content generated by the model may not always be accurate or appropriate. Please use it responsibly.")
        seed_text = st.text_input("Enter your prompt:")
        max_length = st.slider("Max Length:", min_value=50, max_value=500, value=100)
        temperature = st.slider("Temperature:", min_value=0.1, max_value=2.0, value=1.0)

        if st.button("Generate"):
            if seed_text.strip():
                with st.spinner("Generating text..."):
                    generated_texts = generate_text(seed_text, max_length, temperature)
                    for i, generated_text in enumerate(generated_texts):
                        st.subheader(f"Generated Text {i + 1}")
                        st.write(generated_text)
            else:
                st.warning("Please enter a prompt to generate text.")

    st.markdown("<br>", unsafe_allow_html=True)
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("<h4 style='color: blue;'>Forgot Password?</h4>", unsafe_allow_html=True)
        if st.button("Reset Password"):
            st.session_state.page = 'forgot_password'
            st.experimental_rerun()
    with col2:
        st.markdown("<h4 style='color: blue;'>New user?</h4>", unsafe_allow_html=True)
        if st.button("Go to Sign Up"):
            st.session_state.page = 'signup'
            st.experimental_rerun()

# Forgot Password Page
elif st.session_state.page == 'forgot_password':
    st.markdown("<h2 style='color: yellow;'>Forgot Password</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='color: blue;'>Forgot Password</h3>", unsafe_allow_html=True)
    with st.form(key='forgot_password_form'):
        forgot_username = st.text_input("Enter your username for password reset")
        new_password = st.text_input("Enter new password", type="password")
        forgot_password_button = st.form_submit_button("Reset Password")

    if forgot_password_button:
        if forgot_username and new_password:
            forgot_password(forgot_username, new_password)
            st.success("Password reset successfully!")
        else:
            st.error("Please provide both username and new password.")

    if st.button("Back to Login"):
        st.session_state.page = 'login'
        st.session_state.authenticated = False
        st.experimental_rerun()

# Sign Up Page
elif st.session_state.page == 'signup':
    st.markdown("<h2 style='color: red;'>Sign Up</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='color: blue;'>Create a New Account</h3>", unsafe_allow_html=True)
    with st.form(key='create_account_form'):
        new_username = st.text_input("New Username")
        new_password = st.text_input("New Password", type="password")
        create_account_button = st.form_submit_button("Create Account")

    if create_account_button:
        if new_username and new_password:
            insert_credentials(new_username, new_password)
            st.success("Account created successfully!")
        else:
            st.error("Please provide both username and password.")

    if st.button("Back to Login"):
        st.session_state.page = 'login'
        st.session_state.authenticated = False
        st.experimental_rerun()
